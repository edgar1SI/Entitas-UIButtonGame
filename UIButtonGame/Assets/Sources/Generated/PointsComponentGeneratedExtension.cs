//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public PointsComponent points { get { return (PointsComponent)GetComponent(GameComponentIds.Points); } }
        public bool hasPoints { get { return HasComponent(GameComponentIds.Points); } }

        public Entity AddPoints(int newCurrPoints, int newTargetPoints) {
            var component = CreateComponent<PointsComponent>(GameComponentIds.Points);
            component.currPoints = newCurrPoints;
            component.targetPoints = newTargetPoints;
            return AddComponent(GameComponentIds.Points, component);
        }

        public Entity ReplacePoints(int newCurrPoints, int newTargetPoints) {
            var component = CreateComponent<PointsComponent>(GameComponentIds.Points);
            component.currPoints = newCurrPoints;
            component.targetPoints = newTargetPoints;
            ReplaceComponent(GameComponentIds.Points, component);
            return this;
        }

        public Entity RemovePoints() {
            return RemoveComponent(GameComponentIds.Points);
        }
    }

    public partial class Context {

        public Entity pointsEntity { get { return GetGroup(GameMatcher.Points).GetSingleEntity(); } }
        public PointsComponent points { get { return pointsEntity.points; } }
        public bool hasPoints { get { return pointsEntity != null; } }

        public Entity SetPoints(int newCurrPoints, int newTargetPoints) {
            if(hasPoints) {
                throw new EntitasException("Could not set points!\n" + this + " already has an entity with PointsComponent!",
                    "You should check if the context already has a pointsEntity before setting it or use context.ReplacePoints().");
            }
            var entity = CreateEntity();
            entity.AddPoints(newCurrPoints, newTargetPoints);
            return entity;
        }

        public Entity ReplacePoints(int newCurrPoints, int newTargetPoints) {
            var entity = pointsEntity;
            if(entity == null) {
                entity = SetPoints(newCurrPoints, newTargetPoints);
            } else {
                entity.ReplacePoints(newCurrPoints, newTargetPoints);
            }

            return entity;
        }

        public void RemovePoints() {
            DestroyEntity(pointsEntity);
        }
    }
}

    public partial class GameMatcher {

        static IMatcher _matcherPoints;

        public static IMatcher Points {
            get {
                if(_matcherPoints == null) {
                    var matcher = (Matcher)Matcher.AllOf(GameComponentIds.Points);
                    matcher.componentNames = GameComponentIds.componentNames;
                    _matcherPoints = matcher;
                }

                return _matcherPoints;
            }
        }
    }
